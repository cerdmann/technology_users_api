{
	"info": {
		"_postman_id": "9631591b-73e0-4381-a066-26a3ee7ebed3",
		"name": "Users API",
		"description": "API for creating and managing NOVA Security users.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "16871461-9631591b-73e0-4381-a066-26a3ee7ebed3"
	},
	"item": [
		{
			"name": "get",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd786bc5-55a0-432b-bcc6-8b6ffd2f4cef",
								"exec": [
									"const res = pm.response.json();",
									"const id = pm.collectionVariables.get('id');",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('One user exists', () => {",
									"   pm.expect(res).to.have.length(2);",
									"});",
									"",
									"pm.test('User has all relevant fields', () => {",
									"    res.forEach((val, i) => {",
									"        if (i > 0) {",
									"            pm.expect(val).to.have.all.keys('id', 'firstName', 'lastName');",
									"            ",
									"        }",
									"    });",
									"});",
									"",
									"pm.test('User passwords are not exposed', () => {",
									"    res.forEach((val) => {",
									"       pm.expect(val).to.not.have.property('password');",
									"    });",
									"});",
									"",
									"// cleanup",
									"pm.globals.unset('id');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "79e88bdf-e021-439a-ad5e-c1f21e8311e7",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/get?all=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "all",
									"value": "true"
								}
							]
						},
						"description": "Get all users in the system."
					},
					"response": [
						{
							"id": "8151ee70-9a3a-4c41-acc6-bebac49dd118",
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/get?all=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get"
									],
									"query": [
										{
											"key": "all",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"disabled": false,
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"disabled": false,
									"key": "Content-Length",
									"value": "105",
									"description": ""
								},
								{
									"disabled": false,
									"key": "Date",
									"value": "Fri, 11 Jan 2019 00:00:53 GMT",
									"description": ""
								},
								{
									"disabled": false,
									"key": "ETag",
									"value": "W/\"69-ti7ujd/Cyb8EeoWoqRXh482Zy5o\"",
									"description": ""
								},
								{
									"disabled": false,
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"status\": \"success\"\n  },\n  {\n    \"firstName\": \"Ben\",\n    \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\",\n    \"lastName\": \"Smith\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get users by last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8daa81f-51f6-47a4-97c9-508a36bccf06",
								"exec": [
									"const res = pm.response.json();",
									"const id = pm.collectionVariables.get('id');",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('List of users is returned', () => {",
									"    pm.expect(res).to.be.an('array');",
									"});",
									"",
									"pm.test('User passwords are not exposed', () => {",
									"    res.forEach((val, i) => {",
									"        if (i > 0) {",
									"            pm.expect(val).to.not.have.all.keys('password');   ",
									"        }",
									"    });",
									"});",
									"",
									"pm.test('User has all relevant fields and correct types', () => {",
									"    res.forEach((val, i) => {",
									"        if (i > 0) {",
									"            pm.expect(val.id).to.be.a('string');",
									"            pm.expect(val.firstName).to.be.a('string');",
									"            pm.expect(val.lastName).to.be.a('string');",
									"        }",
									"    });",
									"});",
									"",
									"// cleanup",
									"pm.collectionVariables.unset('id');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "68ad21c2-e13c-4409-9e17-67d0a8ed75fd",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/get/?firstName={{$randomLastName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get",
								""
							],
							"query": [
								{
									"key": "firstName",
									"value": "{{$randomLastName}}",
									"description": "The user's first name (required)"
								}
							]
						},
						"description": "Retrieves all users with the given `firstName`."
					},
					"response": [
						{
							"id": "66a6284b-c9e9-4e4b-acff-60c4dbd41d79",
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/get/?firstName={{$randomLastName}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get",
										""
									],
									"query": [
										{
											"key": "firstName",
											"value": "{{$randomLastName}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"disabled": false,
									"key": "Connection",
									"value": "keep-alive",
									"description": ""
								},
								{
									"disabled": false,
									"key": "Content-Length",
									"value": "105",
									"description": ""
								},
								{
									"disabled": false,
									"key": "Date",
									"value": "Fri, 11 Jan 2019 00:05:34 GMT",
									"description": ""
								},
								{
									"disabled": false,
									"key": "ETag",
									"value": "W/\"69-F/ktIhtM5We/sndYYNUK1vmdEnQ\"",
									"description": ""
								},
								{
									"disabled": false,
									"key": "X-Powered-By",
									"value": "Express",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"status\": \"success\"\n  },\n  {\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\",\n    \"lastName\": \"{{$randomLastName}}\"\n  }\n]"
						}
					]
				}
			],
			"id": "1017921c-9ee0-4d46-a2fc-4cc51d281a3b"
		},
		{
			"name": "New user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89ff1db1-cde5-4faa-b480-d3facae0152f",
						"exec": [
							"const res = pm.response.json();",
							"",
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('API response is successful', () => {",
							"    pm.expect(res.status).to.eql('success');",
							"});",
							"",
							"pm.test('Created user has correct type of user ID', () => {",
							"    pm.expect(res.id).to.be.a('string');",
							"});",
							"",
							"pm.test('Does not expose user password', () => {",
							"    pm.expect(res).to.not.have.property('password');",
							"});",
							"",
							"pm.test('Created user has all relevant fields', () => {",
							"    pm.expect(res).to.have.all.keys('status', 'id', 'firstName', 'lastName');",
							"});",
							"pm.collectionVariables.set('id', pm.response.json().id)",
							"",
							"function rawToObject (str) {",
							"    return str.split('&').reduce((prev, curr, i, arr) => {",
							"        var p = curr.split('=');",
							"        prev[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);",
							"        return prev;",
							"    }, {});",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bc17bd35-13ec-47db-94ee-5f8589358cbe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				},
				"description": "Creates a new user in the system. The user will be assigned an ID automatically. This can be found in the response."
			},
			"response": [
				{
					"id": "82864af6-9cf3-451b-add1-4fbae0cab196",
					"name": "New user",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"create"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"_postman_previewtype": "html",
					"header": [
						{
							"disabled": false,
							"key": "Connection",
							"value": "keep-alive",
							"description": ""
						},
						{
							"disabled": false,
							"key": "Content-Length",
							"value": "101",
							"description": ""
						},
						{
							"disabled": false,
							"key": "Date",
							"value": "Thu, 10 Jan 2019 23:58:59 GMT",
							"description": ""
						},
						{
							"disabled": false,
							"key": "ETag",
							"value": "W/\"65-KsPJ95rCxmmvvRBY2Sqroxk2vmA\"",
							"description": ""
						},
						{
							"disabled": false,
							"key": "X-Powered-By",
							"value": "Express",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n  \"firstName\": \"Ben\",\n  \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\",\n  \"lastName\": \"Smith\",\n  \"status\": \"success\"\n}"
				}
			]
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5c4e93d-cb13-45c9-922c-6c4185a2140e",
						"exec": [
							"const response = pm.response;",
							"const id = pm.request.url.query.get('id');",
							"",
							"pm.test('Operation is successful', () => {",
							"    const res = response.json();",
							"    pm.expect(res.status).to.eql('success');",
							"});",
							"",
							"pm.test('User matches requested user', () => {",
							"    const res = response.json();",
							"    pm.expect(res.id).to.eql(id);",
							"});",
							"",
							"",
							"// cleanup",
							"pm.collectionVariables.unset('id');"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "727a2ea7-0cc4-4d85-951a-b896d9f07a14",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\"\""
				},
				"url": {
					"raw": "{{baseUrl}}/delete?id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delete"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}",
							"description": "The user's ID"
						}
					]
				},
				"description": "Deletes a user from the system by `id`."
			},
			"response": [
				{
					"id": "e8e6c0d2-6997-43da-a915-0608c217c91e",
					"name": "Delete user",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"\""
						},
						"url": {
							"raw": "{{baseUrl}}/delete?id={{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"_postman_previewtype": "html",
					"header": [
						{
							"disabled": false,
							"key": "Connection",
							"value": "keep-alive",
							"description": ""
						},
						{
							"disabled": false,
							"key": "Content-Length",
							"value": "64",
							"description": ""
						},
						{
							"disabled": false,
							"key": "Date",
							"value": "Fri, 11 Jan 2019 00:20:55 GMT",
							"description": ""
						},
						{
							"disabled": false,
							"key": "ETag",
							"value": "W/\"40-bT/ASzl0KO3wj/eo2xEBaHPLnvk\"",
							"description": ""
						},
						{
							"disabled": false,
							"key": "X-Powered-By",
							"value": "Express",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n  \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\",\n  \"status\": \"success\"\n}"
				}
			]
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59b1440a-4519-4961-8f2d-2830313ae9c1",
						"exec": [
							"const res = pm.response.json();",
							"const id = pm.request.url.query.get('id');",
							"const firstName =JSON.parse(pm.request.body.raw).firstName",
							"console.log('res.id vs id: '+res.id + id)",
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (res.status === 'success') {",
							"    // pm.test('User matches requested user', () => {",
							"    //     pm.expect(res.id).to.eql(id);",
							"    // });",
							"    ",
							"    pm.test('User has correct type of user ID', () => {",
							"        pm.expect(res.id).to.be.a('string');",
							"    });",
							"    ",
							"    pm.test('User has all relevant fields', () => {",
							"        pm.expect(res).to.have.all.keys('status', 'id', 'firstName', 'lastName');",
							"    });",
							"    ",
							"    pm.test('Does not expose user password', () => {",
							"        pm.expect(res).to.not.have.property('password');",
							"    });",
							"    ",
							"    pm.test('First name is updated to: ' + firstName, () => {",
							"        pm.expect(res.firstName).to.eql(firstName);",
							"    });",
							"}",
							"",
							"else if (res.status === 'no user found') {",
							"    pm.test('Lookup was against correct user', () => {",
							"        pm.expect(res.id).to.eql(id);",
							"    });",
							"}",
							"",
							"else {",
							"    pm.test(res.status).to.eql('invalid request');",
							"}",
							"",
							"// cleanup",
							"pm.collectionVariables.unset('id');",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a1c76f18-cad0-4bde-b9db-d3251b8f3206",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"Benjamin\",\n  \"password\": \"foobar\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/update?id={{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"update"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}",
							"description": "The user's ID (required)"
						}
					]
				},
				"description": "Send the keys that you'd like to update, this can be one or more of `firstName`, `lastName` and `password`."
			},
			"response": [
				{
					"id": "7f7c13ac-184f-4df8-acbe-c0eaed892565",
					"name": "Update user",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Benjamin\",\n  \"password\": \"foobar\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/update?id={{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"update"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"_postman_previewtype": "html",
					"header": [
						{
							"disabled": false,
							"key": "Connection",
							"value": "keep-alive",
							"description": ""
						},
						{
							"disabled": false,
							"key": "Content-Length",
							"value": "106",
							"description": ""
						},
						{
							"disabled": false,
							"key": "Date",
							"value": "Fri, 11 Jan 2019 00:18:07 GMT",
							"description": ""
						},
						{
							"disabled": false,
							"key": "ETag",
							"value": "W/\"6a-SA9mzR+M2pmN7WPGgLm1ZqtRYis\"",
							"description": ""
						},
						{
							"disabled": false,
							"key": "X-Powered-By",
							"value": "Express",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n  \"firstName\": \"Benjamin\",\n  \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\",\n  \"lastName\": \"Smith\",\n  \"status\": \"success\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ba96caf8-f1c8-4139-8c82-2516820e1825",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "90264d53-6834-42c6-8d88-aa7a41167810",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "856e2f5d-30d6-4296-8ed7-a0035cc136a4",
			"key": "baseUrl",
			"value": "https://e80dd17d-c380-4206-9059-a801a70d2ea8.mock.pstmn.io",
			"type": "string"
		}
	]
}